{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  var data = require('stream');\n\n  _stream = function _stream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  var data = require('worker_threads');\n\n  _worker_threads = function _worker_threads() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  var data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ExperimentalWorker = /*#__PURE__*/function () {\n  function ExperimentalWorker(options) {\n    _classCallCheck(this, ExperimentalWorker);\n\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._stderr = null;\n    this._stdout = null;\n    this._fakeStream = null;\n    this.initialize();\n  }\n\n  _createClass(ExperimentalWorker, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this._worker = new (_worker_threads().Worker)(_path().default.resolve(__dirname, './threadChild.js'), {\n        eval: false,\n        stderr: true,\n        stdout: true,\n        workerData: _objectSpread({\n          cwd: process.cwd(),\n          env: _objectSpread({}, process.env, {\n            JEST_WORKER_ID: String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n\n          }),\n          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n          execArgv: process.execArgv.filter(function (v) {\n            return !/^--(debug|inspect)/.test(v);\n          }),\n          silent: true\n        }, this._options.forkOptions)\n      });\n\n      if (this._worker.stdout) {\n        if (!this._stdout) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stdout.add(this._worker.stdout);\n      }\n\n      if (this._worker.stderr) {\n        if (!this._stderr) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stderr.add(this._worker.stderr);\n      }\n\n      this._worker.on('message', this.onMessage.bind(this));\n\n      this._worker.on('exit', this.onExit.bind(this));\n\n      this._worker.postMessage([_types.CHILD_MESSAGE_INITIALIZE, false, this._options.workerPath, this._options.setupArgs]);\n\n      this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n      // coming from the child. This avoids code duplication related with cleaning\n      // the queue, and scheduling the next call.\n\n      if (this._retries > this._options.maxRetries) {\n        var error = new Error('Call retries were exceeded');\n        this.onMessage([_types.PARENT_MESSAGE_CLIENT_ERROR, error.name, error.message, error.stack, {\n          type: 'WorkerError'\n        }]);\n      }\n    }\n  }, {\n    key: \"_shutdown\",\n    value: function _shutdown() {\n      // End the permanent stream so the merged stream end too\n      if (this._fakeStream) {\n        this._fakeStream.end();\n\n        this._fakeStream = null;\n      }\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(response) {\n      var error;\n\n      switch (response[0]) {\n        case _types.PARENT_MESSAGE_OK:\n          this._onProcessEnd(null, response[1]);\n\n          break;\n\n        case _types.PARENT_MESSAGE_CLIENT_ERROR:\n          error = response[4];\n\n          if (error != null && typeof error === 'object') {\n            var extra = error; // @ts-ignore: no index\n\n            var NativeCtor = global[response[1]];\n            var Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n            error = new Ctor(response[2]);\n            error.type = response[1];\n            error.stack = response[3];\n\n            for (var key in extra) {\n              // @ts-ignore: no index\n              error[key] = extra[key];\n            }\n          }\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        case _types.PARENT_MESSAGE_SETUP_ERROR:\n          error = new Error('Error when calling setup: ' + response[2]); // @ts-ignore: adding custom properties to errors.\n\n          error.type = response[1];\n          error.stack = response[3];\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        default:\n          throw new TypeError('Unexpected response from worker: ' + response[0]);\n      }\n    }\n  }, {\n    key: \"onExit\",\n    value: function onExit(exitCode) {\n      if (exitCode !== 0) {\n        this.initialize();\n\n        if (this._request) {\n          this._worker.postMessage(this._request);\n        }\n      } else {\n        this._shutdown();\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(request, onProcessStart, onProcessEnd) {\n      var _this = this;\n\n      onProcessStart(this);\n\n      this._onProcessEnd = function () {\n        // Clean the request to avoid sending past requests to workers that fail\n        // while waiting for a new request (timers, unhandled rejections...)\n        _this._request = null;\n        return onProcessEnd.apply(void 0, arguments);\n      };\n\n      this._request = request;\n      this._retries = 0;\n\n      this._worker.postMessage(request);\n    }\n  }, {\n    key: \"getWorkerId\",\n    value: function getWorkerId() {\n      return this._options.workerId;\n    }\n  }, {\n    key: \"getStdout\",\n    value: function getStdout() {\n      return this._stdout;\n    }\n  }, {\n    key: \"getStderr\",\n    value: function getStderr() {\n      return this._stderr;\n    }\n  }, {\n    key: \"_getFakeStream\",\n    value: function _getFakeStream() {\n      if (!this._fakeStream) {\n        this._fakeStream = new (_stream().PassThrough)();\n      }\n\n      return this._fakeStream;\n    }\n  }]);\n\n  return ExperimentalWorker;\n}();\n\nexports.default = ExperimentalWorker;","map":{"version":3,"sources":["/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/jest-worker/build/workers/NodeThreadsWorker.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_stream","_worker_threads","_mergeStream","_types","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","ExperimentalWorker","options","_options","_request","_stderr","_stdout","_fakeStream","initialize","_worker","Worker","resolve","__dirname","eval","stderr","stdout","workerData","cwd","process","env","JEST_WORKER_ID","String","workerId","execArgv","v","test","silent","forkOptions","_getFakeStream","add","on","onMessage","bind","onExit","postMessage","CHILD_MESSAGE_INITIALIZE","workerPath","setupArgs","_retries","maxRetries","error","Error","PARENT_MESSAGE_CLIENT_ERROR","name","message","stack","type","end","response","PARENT_MESSAGE_OK","_onProcessEnd","extra","NativeCtor","global","Ctor","PARENT_MESSAGE_SETUP_ERROR","TypeError","exitCode","_shutdown","request","onProcessStart","onProcessEnd","PassThrough"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function _stream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _worker_threads() {\n  const data = require('worker_threads');\n\n  _worker_threads = function _worker_threads() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        })\n      );\n    }\n    ownKeys.forEach(function(key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass ExperimentalWorker {\n  constructor(options) {\n    _defineProperty(this, '_worker', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    this._options = options;\n    this._request = null;\n    this._stderr = null;\n    this._stdout = null;\n    this._fakeStream = null;\n    this.initialize();\n  }\n\n  initialize() {\n    this._worker = new (_worker_threads()).Worker(\n      _path().default.resolve(__dirname, './threadChild.js'),\n      {\n        eval: false,\n        stderr: true,\n        stdout: true,\n        workerData: _objectSpread(\n          {\n            cwd: process.cwd(),\n            env: _objectSpread({}, process.env, {\n              JEST_WORKER_ID: String(this._options.workerId + 1) // 0-indexed workerId, 1-indexed JEST_WORKER_ID\n            }),\n            // Suppress --debug / --inspect flags while preserving others (like --harmony).\n            execArgv: process.execArgv.filter(\n              v => !/^--(debug|inspect)/.test(v)\n            ),\n            silent: true\n          },\n          this._options.forkOptions\n        )\n      }\n    );\n\n    if (this._worker.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(this._worker.stdout);\n    }\n\n    if (this._worker.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(this._worker.stderr);\n    }\n\n    this._worker.on('message', this.onMessage.bind(this));\n\n    this._worker.on('exit', this.onExit.bind(this));\n\n    this._worker.postMessage([\n      _types.CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n      this.onMessage([\n        _types.PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the permanent stream so the merged stream end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n  }\n\n  onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types.PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-ignore: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-ignore: no index\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-ignore: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  onExit(exitCode) {\n    if (exitCode !== 0) {\n      this.initialize();\n\n      if (this._request) {\n        this._worker.postMessage(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  send(request, onProcessStart, onProcessEnd) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      return onProcessEnd(...args);\n    };\n\n    this._request = request;\n    this._retries = 0;\n\n    this._worker.postMessage(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream()).PassThrough();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ExperimentalWorker;\n"]},"metadata":{},"sourceType":"script"}