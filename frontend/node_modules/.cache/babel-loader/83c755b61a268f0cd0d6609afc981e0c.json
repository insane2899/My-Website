{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  var data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  var data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/* istanbul ignore next */\n\n\nvar emptyMethod = function emptyMethod() {};\n\nvar BaseWorkerPool = /*#__PURE__*/function () {\n  function BaseWorkerPool(workerPath, options) {\n    _classCallCheck(this, BaseWorkerPool);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workers', void 0);\n\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n\n    if (!_path().default.isAbsolute(workerPath)) {\n      workerPath = require.resolve(workerPath);\n    }\n\n    var stdout = (0, _mergeStream().default)();\n    var stderr = (0, _mergeStream().default)();\n    var forkOptions = options.forkOptions,\n        maxRetries = options.maxRetries,\n        setupArgs = options.setupArgs;\n\n    for (var i = 0; i < options.numWorkers; i++) {\n      var workerOptions = {\n        forkOptions: forkOptions,\n        maxRetries: maxRetries,\n        setupArgs: setupArgs,\n        workerId: i,\n        workerPath: workerPath\n      };\n      var worker = this.createWorker(workerOptions);\n      var workerStdout = worker.getStdout();\n      var workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  _createClass(BaseWorkerPool, [{\n    key: \"getStderr\",\n    value: function getStderr() {\n      return this._stderr;\n    }\n  }, {\n    key: \"getStdout\",\n    value: function getStdout() {\n      return this._stdout;\n    }\n  }, {\n    key: \"getWorkers\",\n    value: function getWorkers() {\n      return this._workers;\n    }\n  }, {\n    key: \"getWorkerById\",\n    value: function getWorkerById(workerId) {\n      return this._workers[workerId];\n    }\n  }, {\n    key: \"createWorker\",\n    value: function createWorker(_workerOptions) {\n      throw Error('Missing method createWorker in WorkerPool');\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      // We do not cache the request object here. If so, it would only be only\n      // processed by one of the workers, and we want them all to close.\n      for (var i = 0; i < this._workers.length; i++) {\n        this._workers[i].send([_types.CHILD_MESSAGE_END, false], emptyMethod, emptyMethod);\n      }\n    }\n  }]);\n\n  return BaseWorkerPool;\n}();\n\nexports.default = BaseWorkerPool;","map":{"version":3,"sources":["/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/jest-worker/build/base/BaseWorkerPool.js"],"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_mergeStream","_types","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","emptyMethod","BaseWorkerPool","workerPath","options","_options","_workers","Array","numWorkers","isAbsolute","resolve","stdout","stderr","forkOptions","maxRetries","setupArgs","i","workerOptions","workerId","worker","createWorker","workerStdout","getStdout","workerStderr","getStderr","add","_stdout","_stderr","_workerOptions","Error","length","send","CHILD_MESSAGE_END"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _path() {\n  const data = _interopRequireDefault(require('path'));\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/* istanbul ignore next */\nconst emptyMethod = () => {};\n\nclass BaseWorkerPool {\n  constructor(workerPath, options) {\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_workers', void 0);\n\n    this._options = options;\n    this._workers = new Array(options.numWorkers);\n\n    if (!_path().default.isAbsolute(workerPath)) {\n      workerPath = require.resolve(workerPath);\n    }\n\n    const stdout = (0, _mergeStream().default)();\n    const stderr = (0, _mergeStream().default)();\n    const forkOptions = options.forkOptions,\n      maxRetries = options.maxRetries,\n      setupArgs = options.setupArgs;\n\n    for (let i = 0; i < options.numWorkers; i++) {\n      const workerOptions = {\n        forkOptions,\n        maxRetries,\n        setupArgs,\n        workerId: i,\n        workerPath\n      };\n      const worker = this.createWorker(workerOptions);\n      const workerStdout = worker.getStdout();\n      const workerStderr = worker.getStderr();\n\n      if (workerStdout) {\n        stdout.add(workerStdout);\n      }\n\n      if (workerStderr) {\n        stderr.add(workerStderr);\n      }\n\n      this._workers[i] = worker;\n    }\n\n    this._stdout = stdout;\n    this._stderr = stderr;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getWorkers() {\n    return this._workers;\n  }\n\n  getWorkerById(workerId) {\n    return this._workers[workerId];\n  }\n\n  createWorker(_workerOptions) {\n    throw Error('Missing method createWorker in WorkerPool');\n  }\n\n  end() {\n    // We do not cache the request object here. If so, it would only be only\n    // processed by one of the workers, and we want them all to close.\n    for (let i = 0; i < this._workers.length; i++) {\n      this._workers[i].send(\n        [_types.CHILD_MESSAGE_END, false],\n        emptyMethod,\n        emptyMethod\n      );\n    }\n  }\n}\n\nexports.default = BaseWorkerPool;\n"]},"metadata":{},"sourceType":"script"}