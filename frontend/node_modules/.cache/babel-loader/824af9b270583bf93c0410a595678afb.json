{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  var data = _interopRequireDefault(require('child_process'));\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  var data = require('stream');\n\n  _stream = function _stream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  var data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  var data = _interopRequireDefault(require('supports-color'));\n\n  _supportsColor = function _supportsColor() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\n\n\nvar ChildProcessWorker = /*#__PURE__*/function () {\n  function ChildProcessWorker(options) {\n    _classCallCheck(this, ChildProcessWorker);\n\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    this._options = options;\n    this._fakeStream = null;\n    this._request = null;\n    this._stderr = null;\n    this._stdout = null;\n    this.initialize();\n  }\n\n  _createClass(ChildProcessWorker, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var forceColor = _supportsColor().default.stdout ? {\n        FORCE_COLOR: '1'\n      } : {};\n\n      var child = _child_process().default.fork(require.resolve('./processChild'), [], _objectSpread({\n        cwd: process.cwd(),\n        env: _objectSpread({}, process.env, {\n          JEST_WORKER_ID: String(this._options.workerId + 1)\n        }, forceColor),\n        // Suppress --debug / --inspect flags while preserving others (like --harmony).\n        execArgv: process.execArgv.filter(function (v) {\n          return !/^--(debug|inspect)/.test(v);\n        }),\n        silent: true\n      }, this._options.forkOptions));\n\n      if (child.stdout) {\n        if (!this._stdout) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stdout.add(child.stdout);\n      }\n\n      if (child.stderr) {\n        if (!this._stderr) {\n          // We need to add a permanent stream to the merged stream to prevent it\n          // from ending when the subprocess stream ends\n          this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n        }\n\n        this._stderr.add(child.stderr);\n      }\n\n      child.on('message', this.onMessage.bind(this));\n      child.on('exit', this.onExit.bind(this));\n      child.send([_types.CHILD_MESSAGE_INITIALIZE, false, this._options.workerPath, this._options.setupArgs]);\n      this._child = child;\n      this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n      // coming from the child. This avoids code duplication related with cleaning\n      // the queue, and scheduling the next call.\n\n      if (this._retries > this._options.maxRetries) {\n        var error = new Error('Call retries were exceeded');\n        this.onMessage([_types.PARENT_MESSAGE_CLIENT_ERROR, error.name, error.message, error.stack, {\n          type: 'WorkerError'\n        }]);\n      }\n    }\n  }, {\n    key: \"_shutdown\",\n    value: function _shutdown() {\n      // End the temporary streams so the merged streams end too\n      if (this._fakeStream) {\n        this._fakeStream.end();\n\n        this._fakeStream = null;\n      }\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(response) {\n      var error;\n\n      switch (response[0]) {\n        case _types.PARENT_MESSAGE_OK:\n          this._onProcessEnd(null, response[1]);\n\n          break;\n\n        case _types.PARENT_MESSAGE_CLIENT_ERROR:\n          error = response[4];\n\n          if (error != null && typeof error === 'object') {\n            var extra = error; // @ts-ignore: no index\n\n            var NativeCtor = global[response[1]];\n            var Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n            error = new Ctor(response[2]);\n            error.type = response[1];\n            error.stack = response[3];\n\n            for (var key in extra) {\n              // @ts-ignore: adding custom properties to errors.\n              error[key] = extra[key];\n            }\n          }\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        case _types.PARENT_MESSAGE_SETUP_ERROR:\n          error = new Error('Error when calling setup: ' + response[2]); // @ts-ignore: adding custom properties to errors.\n\n          error.type = response[1];\n          error.stack = response[3];\n\n          this._onProcessEnd(error, null);\n\n          break;\n\n        default:\n          throw new TypeError('Unexpected response from worker: ' + response[0]);\n      }\n    }\n  }, {\n    key: \"onExit\",\n    value: function onExit(exitCode) {\n      if (exitCode !== 0) {\n        this.initialize();\n\n        if (this._request) {\n          this._child.send(this._request);\n        }\n      } else {\n        this._shutdown();\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(request, onProcessStart, onProcessEnd) {\n      var _this = this;\n\n      onProcessStart(this);\n\n      this._onProcessEnd = function () {\n        // Clean the request to avoid sending past requests to workers that fail\n        // while waiting for a new request (timers, unhandled rejections...)\n        _this._request = null;\n        return onProcessEnd.apply(void 0, arguments);\n      };\n\n      this._request = request;\n      this._retries = 0;\n\n      this._child.send(request);\n    }\n  }, {\n    key: \"getWorkerId\",\n    value: function getWorkerId() {\n      return this._options.workerId;\n    }\n  }, {\n    key: \"getStdout\",\n    value: function getStdout() {\n      return this._stdout;\n    }\n  }, {\n    key: \"getStderr\",\n    value: function getStderr() {\n      return this._stderr;\n    }\n  }, {\n    key: \"_getFakeStream\",\n    value: function _getFakeStream() {\n      if (!this._fakeStream) {\n        this._fakeStream = new (_stream().PassThrough)();\n      }\n\n      return this._fakeStream;\n    }\n  }]);\n\n  return ChildProcessWorker;\n}();\n\nexports.default = ChildProcessWorker;","map":{"version":3,"sources":["/home/soumik/Desktop/Java/Java EE projects/Portfolio/frontend/node_modules/jest-worker/build/workers/ChildProcessWorker.js"],"names":["Object","defineProperty","exports","value","default","_child_process","data","_interopRequireDefault","require","_stream","_mergeStream","_supportsColor","_types","obj","__esModule","_objectSpread","target","i","arguments","length","source","ownKeys","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","configurable","writable","ChildProcessWorker","options","_options","_fakeStream","_request","_stderr","_stdout","initialize","forceColor","stdout","FORCE_COLOR","child","fork","resolve","cwd","process","env","JEST_WORKER_ID","String","workerId","execArgv","v","test","silent","forkOptions","_getFakeStream","add","stderr","on","onMessage","bind","onExit","send","CHILD_MESSAGE_INITIALIZE","workerPath","setupArgs","_child","_retries","maxRetries","error","Error","PARENT_MESSAGE_CLIENT_ERROR","name","message","stack","type","end","response","PARENT_MESSAGE_OK","_onProcessEnd","extra","NativeCtor","global","Ctor","PARENT_MESSAGE_SETUP_ERROR","TypeError","exitCode","_shutdown","request","onProcessStart","onProcessEnd","PassThrough"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _child_process() {\n  const data = _interopRequireDefault(require('child_process'));\n\n  _child_process = function _child_process() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _stream() {\n  const data = require('stream');\n\n  _stream = function _stream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _mergeStream() {\n  const data = _interopRequireDefault(require('merge-stream'));\n\n  _mergeStream = function _mergeStream() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _supportsColor() {\n  const data = _interopRequireDefault(require('supports-color'));\n\n  _supportsColor = function _supportsColor() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(\n        Object.getOwnPropertySymbols(source).filter(function(sym) {\n          return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n        })\n      );\n    }\n    ownKeys.forEach(function(key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * This class wraps the child process and provides a nice interface to\n * communicate with. It takes care of:\n *\n *  - Re-spawning the process if it dies.\n *  - Queues calls while the worker is busy.\n *  - Re-sends the requests if the worker blew up.\n *\n * The reason for queueing them here (since childProcess.send also has an\n * internal queue) is because the worker could be doing asynchronous work, and\n * this would lead to the child process to read its receiving buffer and start a\n * second call. By queueing calls here, we don't send the next call to the\n * children until we receive the result of the previous one.\n *\n * As soon as a request starts to be processed by a worker, its \"processed\"\n * field is changed to \"true\", so that other workers which might encounter the\n * same call skip it.\n */\nclass ChildProcessWorker {\n  constructor(options) {\n    _defineProperty(this, '_child', void 0);\n\n    _defineProperty(this, '_options', void 0);\n\n    _defineProperty(this, '_onProcessEnd', void 0);\n\n    _defineProperty(this, '_fakeStream', void 0);\n\n    _defineProperty(this, '_request', void 0);\n\n    _defineProperty(this, '_retries', void 0);\n\n    _defineProperty(this, '_stderr', void 0);\n\n    _defineProperty(this, '_stdout', void 0);\n\n    this._options = options;\n    this._fakeStream = null;\n    this._request = null;\n    this._stderr = null;\n    this._stdout = null;\n    this.initialize();\n  }\n\n  initialize() {\n    const forceColor = _supportsColor().default.stdout\n      ? {\n          FORCE_COLOR: '1'\n        }\n      : {};\n\n    const child = _child_process().default.fork(\n      require.resolve('./processChild'),\n      [],\n      _objectSpread(\n        {\n          cwd: process.cwd(),\n          env: _objectSpread(\n            {},\n            process.env,\n            {\n              JEST_WORKER_ID: String(this._options.workerId + 1)\n            },\n            forceColor\n          ),\n          // Suppress --debug / --inspect flags while preserving others (like --harmony).\n          execArgv: process.execArgv.filter(v => !/^--(debug|inspect)/.test(v)),\n          silent: true\n        },\n        this._options.forkOptions\n      )\n    );\n\n    if (child.stdout) {\n      if (!this._stdout) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stdout = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stdout.add(child.stdout);\n    }\n\n    if (child.stderr) {\n      if (!this._stderr) {\n        // We need to add a permanent stream to the merged stream to prevent it\n        // from ending when the subprocess stream ends\n        this._stderr = (0, _mergeStream().default)(this._getFakeStream());\n      }\n\n      this._stderr.add(child.stderr);\n    }\n\n    child.on('message', this.onMessage.bind(this));\n    child.on('exit', this.onExit.bind(this));\n    child.send([\n      _types.CHILD_MESSAGE_INITIALIZE,\n      false,\n      this._options.workerPath,\n      this._options.setupArgs\n    ]);\n    this._child = child;\n    this._retries++; // If we exceeded the amount of retries, we will emulate an error reply\n    // coming from the child. This avoids code duplication related with cleaning\n    // the queue, and scheduling the next call.\n\n    if (this._retries > this._options.maxRetries) {\n      const error = new Error('Call retries were exceeded');\n      this.onMessage([\n        _types.PARENT_MESSAGE_CLIENT_ERROR,\n        error.name,\n        error.message,\n        error.stack,\n        {\n          type: 'WorkerError'\n        }\n      ]);\n    }\n  }\n\n  _shutdown() {\n    // End the temporary streams so the merged streams end too\n    if (this._fakeStream) {\n      this._fakeStream.end();\n\n      this._fakeStream = null;\n    }\n  }\n\n  onMessage(response) {\n    let error;\n\n    switch (response[0]) {\n      case _types.PARENT_MESSAGE_OK:\n        this._onProcessEnd(null, response[1]);\n\n        break;\n\n      case _types.PARENT_MESSAGE_CLIENT_ERROR:\n        error = response[4];\n\n        if (error != null && typeof error === 'object') {\n          const extra = error; // @ts-ignore: no index\n\n          const NativeCtor = global[response[1]];\n          const Ctor = typeof NativeCtor === 'function' ? NativeCtor : Error;\n          error = new Ctor(response[2]);\n          error.type = response[1];\n          error.stack = response[3];\n\n          for (const key in extra) {\n            // @ts-ignore: adding custom properties to errors.\n            error[key] = extra[key];\n          }\n        }\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      case _types.PARENT_MESSAGE_SETUP_ERROR:\n        error = new Error('Error when calling setup: ' + response[2]); // @ts-ignore: adding custom properties to errors.\n\n        error.type = response[1];\n        error.stack = response[3];\n\n        this._onProcessEnd(error, null);\n\n        break;\n\n      default:\n        throw new TypeError('Unexpected response from worker: ' + response[0]);\n    }\n  }\n\n  onExit(exitCode) {\n    if (exitCode !== 0) {\n      this.initialize();\n\n      if (this._request) {\n        this._child.send(this._request);\n      }\n    } else {\n      this._shutdown();\n    }\n  }\n\n  send(request, onProcessStart, onProcessEnd) {\n    onProcessStart(this);\n\n    this._onProcessEnd = (...args) => {\n      // Clean the request to avoid sending past requests to workers that fail\n      // while waiting for a new request (timers, unhandled rejections...)\n      this._request = null;\n      return onProcessEnd(...args);\n    };\n\n    this._request = request;\n    this._retries = 0;\n\n    this._child.send(request);\n  }\n\n  getWorkerId() {\n    return this._options.workerId;\n  }\n\n  getStdout() {\n    return this._stdout;\n  }\n\n  getStderr() {\n    return this._stderr;\n  }\n\n  _getFakeStream() {\n    if (!this._fakeStream) {\n      this._fakeStream = new (_stream()).PassThrough();\n    }\n\n    return this._fakeStream;\n  }\n}\n\nexports.default = ChildProcessWorker;\n"]},"metadata":{},"sourceType":"script"}